
// Script de diagnostic pour r√©soudre les probl√®mes d'√©dition Lovable
console.log("üîç Lancement du diagnostic d'int√©gration Lovable...");

// V√©rifier si le script Lovable est pr√©sent dans le document
const hasLovableScript = () => {
  const scripts = document.querySelectorAll('script');
  for (const script of scripts) {
    if (script.src && script.src.includes('gptengineer.js')) {
      console.log('‚úÖ Script Lovable trouv√© dans le document');
      return true;
    }
  }
  console.log('‚ùå Script Lovable manquant dans le document');
  return false;
};

// V√©rifier l'√©tat du chargement du document
const checkDocumentState = () => {
  console.log(`√âtat du document: ${document.readyState}`);
  console.log(`DOM enti√®rement charg√©: ${document.readyState === 'complete' ? 'Oui' : 'Non'}`);
};

// V√©rifier si le mode d√©veloppement est correctement configur√©
const checkDevMode = () => {
  try {
    const isDev = import.meta.env.MODE === 'development';
    console.log(`Mode de d√©veloppement: ${isDev ? 'Activ√©' : 'D√©sactiv√©'}`);
  } catch (e) {
    console.log('Mode de d√©veloppement: Non d√©tect√©');
  }
  
  const hasDevTools = window.__REACT_DEVTOOLS_GLOBAL_HOOK__;
  console.log(`React DevTools d√©tect√©: ${hasDevTools ? 'Oui' : 'Non'}`);
};

// V√©rifier que le script est charg√© correctement
const checkLovableLoaded = () => {
  if (typeof window.GPTEngineer !== 'undefined' || typeof window.__GPTEngineer !== 'undefined') {
    console.log('‚úÖ Objet global Lovable d√©tect√©');
  } else {
    console.log('‚ùå Objet global Lovable non d√©tect√©');
  }
};

// Fonction pour ajouter le script Lovable s'il est manquant
const fixLovableScript = () => {
  if (!hasLovableScript()) {
    console.log('üîß Ajout du script Lovable manquant');
    const script = document.createElement('script');
    script.src = 'https://cdn.gpteng.co/gptengineer.js';
    script.type = 'module';
    document.head.appendChild(script);
    return true;
  }
  return false;
};

// Fonction pour corriger le cache du navigateur
const fixCacheIssues = () => {
  console.log('üîÉ Tentative de contournement des probl√®mes de cache');
  
  // Supprimer les scripts existants
  const existingScripts = document.querySelectorAll('script[src*="gptengineer.js"]');
  existingScripts.forEach(script => script.remove());
  
  // Ajouter un nouveau script avec un param√®tre de version pour contourner le cache
  const script = document.createElement('script');
  script.src = `https://cdn.gpteng.co/gptengineer.js?v=${new Date().getTime()}`;
  script.type = 'module';
  document.head.appendChild(script);
  
  return true;
};

// Ex√©cuter le diagnostic au chargement
window.addEventListener('DOMContentLoaded', () => {
  console.log('üöÄ Diagnostic Lovable d√©marr√©');
  hasLovableScript();
  checkDocumentState();
  checkDevMode();
  checkLovableLoaded();
  
  // Tentative de correction automatique
  let fixed = fixLovableScript();
  if (fixed) {
    console.log('‚úÖ Correction appliqu√©e. Rafra√Æchissez la page pour v√©rifier.');
  } else {
    // Si le script est pr√©sent mais ne fonctionne pas, essayer de contourner le cache
    if (!window.GPTEngineer && !window.__GPTEngineer) {
      console.log('‚ö†Ô∏è Script pr√©sent mais non fonctionnel, tentative de contournement du cache');
      fixed = fixCacheIssues();
      if (fixed) {
        console.log('‚úÖ Contournement du cache appliqu√©. Rafra√Æchissez la page pour v√©rifier.');
      }
    } else {
      console.log('‚úÖ Script Lovable pr√©sent et fonctionnel.');
    }
  }
});

// Ajouter une fonction globale pour lancer le diagnostic manuellement
window.runLovableDiagnostic = () => {
  console.log('üîÑ Diagnostic Lovable manuel d√©marr√©');
  hasLovableScript();
  checkDocumentState();
  checkDevMode();
  checkLovableLoaded();
  
  // Si le script ne fonctionne pas, essayer de contourner le cache
  if (!window.GPTEngineer && !window.__GPTEngineer) {
    return fixCacheIssues();
  }
  return fixLovableScript();
};

// Ajouter une fonction pour r√©injecter le script sans utiliser le cache
window.forceLovableReload = () => {
  console.log('‚ö° R√©injection forc√©e du script Lovable');
  return fixCacheIssues();
};

console.log('üèÅ Script de diagnostic Lovable charg√©. Utilisez window.runLovableDiagnostic() pour ex√©cuter manuellement ou window.forceLovableReload() pour forcer la r√©injection.');
