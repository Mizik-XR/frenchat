
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';
import { handleLoadError, renderFallbackScreen } from '@/utils/startup/errorHandlingUtils';

// Fonction pour v√©rifier si le script Lovable est charg√©
function isLovableScriptLoaded() {
  const scripts = document.querySelectorAll('script');
  for (const script of scripts) {
    if (script.src && script.src.includes('gptengineer.js')) {
      return true;
    }
  }
  return false;
}

// Fonction pour s'assurer que React est correctement charg√©
function ensureReactLoaded() {
  try {
    // Test simple pour v√©rifier que React est disponible et fonctionne
    React.createContext({});
    return true;
  } catch (error) {
    console.error("React n'est pas correctement initialis√©:", error);
    return false;
  }
}

// Fonction pour initialiser l'application avec des v√©rifications
function initializeApp() {
  console.log("üöÄ Initialisation de l'application...");
  
  // Assurer que le DOM est pr√™t
  if (document.readyState === 'loading') {
    console.log("DOM n'est pas encore pr√™t, attente...");
    return; // Le DOMContentLoaded d√©clenchera l'initialisation
  }
  
  const rootElement = document.getElementById('root');
  
  if (!rootElement) {
    console.error("‚ùå √âl√©ment racine non trouv√© dans le DOM");
    return;
  }
  
  try {
    // V√©rifier que React est correctement charg√©
    if (!ensureReactLoaded()) {
      console.error("‚ùå React n'est pas correctement initialis√©");
      renderFallbackScreen(rootElement, "Probl√®me d'initialisation de React");
      
      // Redirection automatique vers le mode cloud apr√®s un court d√©lai
      setTimeout(() => {
        window.location.href = '/?forceCloud=true&mode=cloud&client=true';
      }, 2000);
      
      return;
    }
    
    // V√©rifier si le script Lovable est charg√© et avertir si non
    if (!isLovableScriptLoaded()) {
      console.warn("‚ö†Ô∏è Script Lovable non d√©tect√© - les fonctionnalit√©s d'√©dition pourraient ne pas fonctionner");
    }
    
    console.log("üîÑ Montage de l'application React...");
    const root = createRoot(rootElement);
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
    console.log("‚úÖ Application React mont√©e avec succ√®s");
    
    // Cr√©er un fichier .env.local avec le mode cloud activ√© si n√©cessaire
    if (new URLSearchParams(window.location.search).has('createEnv')) {
      console.log("‚öôÔ∏è Tentative de cr√©ation de .env.local pour le mode cloud");
    }
  } catch (error) {
    console.error("‚ùå Erreur critique pendant l'initialisation:", error);
    handleLoadError(error as Error);
  }
}

// S'assurer que le DOM est charg√© avant d'initialiser
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    console.log("DOM charg√©, d√©marrage de l'initialisation");
    initializeApp();
  });
} else {
  console.log("DOM d√©j√† charg√©, d√©marrage imm√©diat de l'initialisation");
  initializeApp();
}

// D√©finir un d√©lai maximum pour le montage de l'application
setTimeout(() => {
  const loadingScreen = document.getElementById('loading-screen');
  if (loadingScreen && loadingScreen.parentElement) {
    // Fix: Using parentElement instead of parentNode.id
    const isRootParent = loadingScreen.parentElement.id === 'root';
    
    if (isRootParent) {
      console.warn("‚ö†Ô∏è D√©lai de montage d√©pass√©, tentative de r√©cup√©ration...");
      const errorMessage = document.querySelector('.error-message');
      const retryBtn = document.querySelector('.retry-btn');
      
      if (errorMessage) {
        (errorMessage as HTMLElement).style.display = 'block';
        (errorMessage as HTMLElement).textContent = "L'application met plus de temps que pr√©vu √† d√©marrer. Essayez le mode cloud.";
      }
      
      if (retryBtn) {
        (retryBtn as HTMLElement).style.display = 'inline-block';
      }
    }
  }
}, 10000); // 10 secondes de d√©lai maximum
