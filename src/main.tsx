
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';
import { isLovableScriptLoaded, injectLovableScript, forceResetLovable } from './utils/lovable/editingUtils';

/**
 * Tentative d'initialisation de Lovable avec plusieurs essais si n√©cessaire
 * @returns Promise r√©solue quand l'initialisation est termin√©e
 */
async function initializeLovable(maxAttempts = 3): Promise<boolean> {
  console.log("üîÑ Initialisation de Lovable...");
  let attempts = 0;
  
  while (attempts < maxAttempts) {
    attempts++;
    console.log(`‚öôÔ∏è Tentative d'initialisation ${attempts}/${maxAttempts}`);
    
    try {
      if (!isLovableScriptLoaded()) {
        console.log("üíâ Script Lovable non d√©tect√©, injection en cours...");
        await injectLovableScript();
      } else {
        console.log("üîç Script Lovable d√©tect√©, v√©rification de l'initialisation...");
        
        // Si le script est pr√©sent mais pas initialis√© apr√®s 2 secondes, forcer une r√©initialisation
        await new Promise<void>(resolve => {
          setTimeout(() => {
            const initialized = typeof (window as any).__GPT_ENGINEER__ !== 'undefined';
            if (!initialized && attempts < maxAttempts) {
              console.warn("‚ö†Ô∏è Script Lovable pr√©sent mais non initialis√©, tentative de r√©initialisation...");
              forceResetLovable().then(resolve);
            } else {
              resolve();
            }
          }, 2000);
        });
      }
      
      // V√©rifier si l'initialisation a r√©ussi
      if (typeof (window as any).__GPT_ENGINEER__ !== 'undefined') {
        console.log("‚úÖ Script Lovable initialis√© avec succ√®s");
        return true;
      }
    } catch (error) {
      console.error("‚ùå Erreur pendant l'initialisation de Lovable:", error);
    }
    
    // Attendre avant la prochaine tentative
    if (attempts < maxAttempts) {
      console.log("‚è±Ô∏è Attente avant nouvelle tentative...");
      await new Promise(resolve => setTimeout(resolve, 2000));
    }
  }
  
  console.warn("‚ö†Ô∏è √âchec de l'initialisation de Lovable apr√®s plusieurs tentatives");
  return false;
}

// Fonction pour initialiser l'application
async function initializeApp() {
  console.log("üöÄ Initialisation de l'application...");
  
  try {
    // Tenter d'initialiser Lovable
    await initializeLovable();
    
    // Initialiser React ind√©pendamment du succ√®s de Lovable
    console.log("üîÑ Montage de l'application React...");
    const root = createRoot(document.getElementById('root') as HTMLElement);
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
    console.log("‚úÖ Application React mont√©e avec succ√®s");
  } catch (error) {
    console.error("‚ùå Erreur critique pendant l'initialisation:", error);
    
    // Afficher une erreur visible sur la page
    const rootElement = document.getElementById('root');
    if (rootElement) {
      rootElement.innerHTML = `
        <div style="font-family: system-ui; padding: 20px; text-align: center;">
          <h2 style="color: #e11d48;">Erreur lors de l'initialisation</h2>
          <p>Une erreur est survenue pendant le chargement de l'application.</p>
          <button onclick="window.location.reload()" style="background: #3b82f6; color: white; border: none; padding: 8px 16px; border-radius: 4px; cursor: pointer;">
            Rafra√Æchir la page
          </button>
        </div>
      `;
    }
  }
}

// S'assurer que le DOM est charg√© avant d'initialiser
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => initializeApp());
} else {
  initializeApp();
}
