
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY } from './config';

// Type helper for Edge Function responses
export type EdgeFunctionResponse<T> = {
  data: T;
  error: null;
} | {
  data: null;
  error: {
    message: string;
  };
};

// Application state with offline mode capability
export const APP_STATE = {
  isOfflineMode: false,
  supabaseErrors: [] as Error[],
  
  setOfflineMode(value: boolean) {
    this.isOfflineMode = value;
    localStorage.setItem('OFFLINE_MODE', value ? 'true' : 'false');
    // Dispatch event for listeners
    window.dispatchEvent(new CustomEvent('offlinemode-change', { detail: { isOffline: value } }));
  },
  
  logSupabaseError(error: Error) {
    this.supabaseErrors.push(error);
    console.error("Supabase error logged:", error);
  }
};

// Check if offline mode is enabled in localStorage
export function checkOfflineMode() {
  const isPreviewEnvironment = window.location.hostname.includes('lovable');
  const forceCloud = new URLSearchParams(window.location.search).has('forceCloud');
  
  if (isPreviewEnvironment || forceCloud) {
    // Force online mode in preview or when forceCloud parameter is present
    localStorage.setItem('FORCE_CLOUD_MODE', 'true');
    localStorage.setItem('aiServiceType', 'cloud');
    APP_STATE.isOfflineMode = false;
    return;
  }
  
  const storedMode = localStorage.getItem('OFFLINE_MODE');
  APP_STATE.isOfflineMode = storedMode === 'true';
}

// Create client with error handling
let supabaseClient: any = null;

try {
  // Vérifier si on devrait utiliser le mode hors ligne
  checkOfflineMode();
  
  if (APP_STATE.isOfflineMode) {
    console.warn("Application en mode hors ligne, client Supabase non initialisé");
  } else if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
    console.error("Configuration Supabase incomplète, vérifiez vos variables d'environnement");
    APP_STATE.setOfflineMode(true);
  } else {
    // Create client with optimized options
    supabaseClient = createClient<Database>(
      SUPABASE_URL, 
      SUPABASE_PUBLISHABLE_KEY,
      {
        auth: {
          persistSession: true,
          autoRefreshToken: true,
          detectSessionInUrl: true,
          storageKey: 'supabase.auth.token'
        },
        global: {
          fetch: (...args) => {
            // Handle fetch arguments properly
            const request = args[0];
            const options = args[1] || {};
            
            // Conditional cache options
            const updatedOptions = {
              ...options,
              cache: request.toString().includes('auth/') ? 'no-cache' : 'default'
            };
            
            return fetch(request, updatedOptions);
          }
        }
      }
    );
    console.log("Client Supabase initialized successfully");
  }
} catch (error) {
  console.error("CRITICAL ERROR: Failed to initialize Supabase client:", error);
  if (error instanceof Error) {
    APP_STATE.logSupabaseError(error);
  }
  supabaseClient = null;
  APP_STATE.setOfflineMode(true);
}

// Export Supabase client
export const supabase = supabaseClient;

// Fonction utilitaire pour détecter si le service d'IA locale est disponible
export function detectLocalAIService() {
  // Implémenter la détection de service local si nécessaire
  return Promise.resolve({ available: false });
}

// Fonction utilitaire pour le préchargement de session
export function preloadSession() {
  if (!supabase || APP_STATE.isOfflineMode) {
    return Promise.resolve({ session: null });
  }
  
  return supabase.auth.getSession().catch(err => {
    console.error("Erreur lors du préchargement de session:", err);
    if (err.message?.includes('Failed to fetch')) {
      APP_STATE.setOfflineMode(true);
    }
    return { session: null };
  });
}

// Fonction utilitaire pour vérifier la connexion Supabase
export function checkSupabaseConnection() {
  if (!supabase) return Promise.resolve(false);
  
  return supabase.auth.getSession()
    .then(() => true)
    .catch(() => false);
}

// Fonction utilitaire pour manipuler les requêtes de profil
export function handleProfileQuery(error: any) {
  console.error("Erreur lors de la requête de profil:", error);
  return null;
}

// Tester la validation des paramètres Supabase
if (!SUPABASE_URL || !SUPABASE_PUBLISHABLE_KEY) {
  console.error("ERREUR CRITIQUE: Configuration Supabase manquante!");
  if (typeof window !== 'undefined') {
    // Afficher une alerte dans la console du navigateur
    console.error(
      "%c⚠️ ERREUR DE CONFIGURATION SUPABASE ⚠️",
      "background: #f44336; color: white; font-size: 16px; padding: 8px;"
    );
    console.error(
      "%cURL Supabase ou clé d'API manquante. Vérifiez votre configuration.",
      "font-size: 14px;"
    );
  }
}

// Initialiser avec une tentative de lecture de session non bloquante
if (typeof window !== 'undefined' && supabase) {
  setTimeout(() => {
    preloadSession().catch(err => {
      console.warn("Session preload failed:", err);
    });
  }, 0);
}
