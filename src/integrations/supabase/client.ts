
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { getBaseUrl } from '@/utils/environmentUtils';

const SUPABASE_URL = "https://dbdueopvtlanxgumenpu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRiZHVlb3B2dGxhbnhndW1lbnB1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk5NzQ0NTIsImV4cCI6MjA1NTU1MDQ1Mn0.lPPbNJANU8Zc7i5OB9_atgDZ84Yp5SBjXCiIqjA79Tk";

// Export SITE_URL for OAuth redirects
export const SITE_URL = getBaseUrl();

// Préchargement de la session Supabase
export const preloadSession = async () => {
  try {
    await supabase.auth.getSession();
    console.log("Session Supabase préchargée");
  } catch (error) {
    console.error("Erreur de préchargement de session Supabase:", error);
  }
};

// Détection dynamique du service d'IA locale
export const detectLocalAIService = async () => {
  try {
    // Teste si un serveur d'IA local est disponible
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 2000); // Timeout après 2 secondes
    
    const localBaseUrls = [
      'http://localhost:8000',
      'http://127.0.0.1:8000',
      // Ajoutez d'autres ports potentiels si nécessaire
    ];
    
    let localAIAvailable = false;
    let localAIUrl = '';
    
    for (const url of localBaseUrls) {
      try {
        const response = await fetch(`${url}/health`, {
          method: 'GET',
          signal: controller.signal
        });
        
        if (response.ok) {
          localAIAvailable = true;
          localAIUrl = url;
          break;
        }
      } catch (e) {
        // Ignore les erreurs et continue avec l'URL suivante
        continue;
      }
    }
    
    clearTimeout(timeoutId);
    
    if (localAIAvailable) {
      console.log("Service d'IA local détecté:", localAIUrl);
      localStorage.setItem('aiServiceType', 'local');
      localStorage.setItem('localAIUrl', localAIUrl);
      return { available: true, url: localAIUrl };
    } else {
      console.log("Aucun service d'IA local détecté, utilisation du service cloud");
      localStorage.setItem('aiServiceType', 'cloud');
      localStorage.removeItem('localAIUrl');
      return { available: false, url: null };
    }
  } catch (error) {
    console.error("Erreur lors de la détection du service d'IA local:", error);
    localStorage.setItem('aiServiceType', 'cloud');
    return { available: false, url: null };
  }
};

// Création du client avec des options optimisées
export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: 'supabase.auth.token'
    },
    global: {
      fetch: (...args) => {
        // Correction de l'opérateur spread pour traiter correctement les arguments typés
        const request = args[0];
        const options = args[1] || {};
        
        // Ajout conditionnel des options de cache
        const updatedOptions = {
          ...options,
          cache: request.toString().includes('auth/') ? 'no-cache' : 'default'
        };
        
        return fetch(request, updatedOptions);
      }
    }
  }
);

// Précharger la session dès que possible si nous sommes dans un navigateur
if (typeof window !== 'undefined') {
  // Préchargement non-bloquant
  setTimeout(preloadSession, 0);
  
  // Détection du service d'IA local au démarrage de l'application
  setTimeout(detectLocalAIService, 1000);
  
  // Réessayer périodiquement la détection du service local (toutes les 30 secondes)
  setInterval(detectLocalAIService, 30000);
}
