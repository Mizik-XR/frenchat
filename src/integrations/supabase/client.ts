
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://dbdueopvtlanxgumenpu.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRiZHVlb3B2dGxhbnhndW1lbnB1Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk5NzQ0NTIsImV4cCI6MjA1NTU1MDQ1Mn0.lPPbNJANU8Zc7i5OB9_atgDZ84Yp5SBjXCiIqjA79Tk";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// App state for offline mode and session management
export const APP_STATE = {
  isOfflineMode: false,
  currentSessionState: null,
  
  setOfflineMode(value: boolean) {
    this.isOfflineMode = value;
    localStorage.setItem('OFFLINE_MODE', value ? 'true' : 'false');
    window.dispatchEvent(new StorageEvent('storage', { key: 'OFFLINE_MODE' }));
  },
  
  getSessionState() {
    return this.currentSessionState;
  },
  
  setSessionState(state: any) {
    this.currentSessionState = state;
  }
};

// Helper function to preload the session
export const preloadSession = async () => {
  try {
    const { data } = await supabase.auth.getSession();
    return data.session;
  } catch (error) {
    console.error("Error preloading session:", error);
    return null;
  }
};

// Helper function to handle profile queries
export const handleProfileQuery = async (userId: string) => {
  try {
    const { data, error } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
      
    return { data, error };
  } catch (error) {
    console.error("Error fetching profile:", error);
    return { data: null, error };
  }
};

// Helper function to check Supabase connection
export const checkSupabaseConnection = async () => {
  try {
    const { error } = await supabase.from('settings').select('id').limit(1);
    return !error;
  } catch (error) {
    return false;
  }
};

// Type for Edge Function responses
export interface EdgeFunctionResponse<T> {
  data: T | null;
  error: {
    message: string;
    status?: number;
  } | null;
}
