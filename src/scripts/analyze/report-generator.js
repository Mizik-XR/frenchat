
/**
 * G√©n√©rateur de rapports pour l'analyse des contextes et d√©pendances
 * Formate et affiche les r√©sultats de mani√®re lisible
 */

const chalk = require('chalk');

/**
 * G√©n√®re un rapport complet de l'analyse
 * @param {Object} results - R√©sultats de l'analyse
 * @param {Array} circularDeps - D√©pendances circulaires d√©tect√©es
 * @param {Array} suggestions - Suggestions pour r√©soudre les probl√®mes
 */
function generateReport(results, circularDeps, suggestions) {
  console.log('\n============================================');
  console.log(chalk.blue('üîç RAPPORT D\'ANALYSE DES CONTEXTES ET D√âPENDANCES'));
  console.log('============================================\n');
  
  // Statistiques g√©n√©rales
  console.log(`Fichiers analys√©s: ${results.filesScanned}`);
  console.log(`Fichiers avec probl√®mes: ${results.filesWithIssues}`);
  console.log(`Probl√®mes totaux trouv√©s: ${results.totalIssues}`);
  console.log(`D√©pendances circulaires d√©tect√©es: ${circularDeps.length}`);
  console.log('\n');
  
  // Probl√®mes par s√©v√©rit√©
  const highSeverity = results.issues.filter(issue => 
    issue.type === 'direct-context-import' || 
    issue.type === 'react-createcontext'
  );
  
  const mediumSeverity = results.issues.filter(issue => 
    issue.type === 'direct-react-import'
  );
  
  const lowSeverity = results.issues.filter(issue => 
    !highSeverity.includes(issue) && 
    !mediumSeverity.includes(issue)
  );
  
  // Afficher les probl√®mes critiques
  if (highSeverity.length > 0) {
    console.log(chalk.red('üî¥ PROBL√àMES CRITIQUES:'));
    console.log('------------------------------------------');
    highSeverity.forEach((issue, index) => {
      console.log(`${index + 1}. ${issue.message} dans ${chalk.cyan(issue.relativePath)}`);
      console.log(`   ${chalk.green('Solution:')} ${issue.suggestion}`);
      console.log();
    });
  }
  
  // Afficher les probl√®mes moyens
  if (mediumSeverity.length > 0) {
    console.log(chalk.yellow('üü† PROBL√àMES MOYENS:'));
    console.log('------------------------------------------');
    mediumSeverity.forEach((issue, index) => {
      console.log(`${index + 1}. ${issue.message} dans ${chalk.cyan(issue.relativePath)}`);
      console.log(`   ${chalk.green('Solution:')} ${issue.suggestion}`);
      console.log();
    });
  }
  
  // Afficher les probl√®mes mineurs
  if (lowSeverity.length > 0) {
    console.log(chalk.blue('üü° PROBL√àMES MINEURS:'));
    console.log('------------------------------------------');
    lowSeverity.forEach((issue, index) => {
      console.log(`${index + 1}. ${issue.message} dans ${chalk.cyan(issue.relativePath)}`);
      console.log(`   ${chalk.green('Solution:')} ${issue.suggestion}`);
      console.log();
    });
  }
  
  // Afficher les d√©pendances circulaires
  if (circularDeps.length > 0) {
    console.log(chalk.magenta('üîÑ D√âPENDANCES CIRCULAIRES:'));
    console.log('------------------------------------------');
    circularDeps.forEach((circular, index) => {
      console.log(`${index + 1}. ${chalk.cyan(circular.path)}`);
      const suggestion = suggestions.find(s => s.circularDep === circular);
      if (suggestion) {
        console.log(`   ${chalk.green('Suggestion:')}`);
        console.log(`   ${suggestion.suggestion.split('\n').join('\n   ')}`);
      }
      console.log();
    });
  }
  
  // Recommandations g√©n√©rales
  console.log(chalk.blue('üìù RECOMMANDATIONS G√âN√âRALES:'));
  console.log('------------------------------------------');
  console.log('1. Utilisez toujours { createContext } depuis @/core/ReactInstance');
  console.log('2. Importez React en tant que { React } depuis @/core/ReactInstance');
  console.log('3. Pour √©viter les d√©pendances circulaires, cr√©ez des fichiers de types partag√©s');
  console.log('4. S√©parez les hooks en logique pure et int√©gration UI');
  console.log('\n');
  
  // Pied de page
  console.log('============================================');
  console.log(`Rapport g√©n√©r√© le ${new Date().toLocaleString()}`);
  console.log('============================================');
}

module.exports = {
  generateReport
};
