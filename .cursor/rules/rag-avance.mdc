---
description: 
globs: 
alwaysApply: true
---

# Règle de RAG avancé

Standards pour l'implémentation du système de Retrieval Augmented Generation.

## À faire
- Implémenter un chunking adaptatif selon la structure sémantique des documents
- Créer des index vectoriels avec métadonnées enrichies
- Utiliser un système de recherche hybride (vectorielle + lexicale)
- Implémenter un reranking des résultats pour améliorer la pertinence
- Construire des prompts contextuels selon le type de question

## À éviter
- Ne pas utiliser un chunking de taille fixe pour tous les documents
- Ne pas ignorer les métadonnées importantes (source, date, auteur)
- Ne pas mélanger les espaces vectoriels de différents embeddings
- Ne pas faire de recherche uniquement vectorielle sans considérer le contexte

## Exemples corrects
```typescript
// Système de chunking adaptatif
import { chunker } from '@/utils/document-processing';
import { embeddings } from '@/services/ai/embeddings';

async function processDocument(document) {
  // Analyse de la structure du document
  const documentStructure = analyzeDocumentStructure(document);
  
  // Chunking adaptatif basé sur la structure
  const chunks = chunker.adaptiveChunk(document.content, {
    preferredSize: 512,
    overlapPercentage: 10,
    respectParagraphs: true,
    respectSections: true,
    structure: documentStructure
  });
  
  // Ajout de métadonnées enrichies
  const enrichedChunks = chunks.map(chunk => ({
    ...chunk,
    metadata: {
      source: document.source,
      title: document.title,
      author: document.author,
      createdAt: document.createdAt,
      section: chunk.sectionInfo,
      context: extractContext(document, chunk.startPosition, chunk.endPosition)
    }
  }));
  
  // Génération d'embeddings et stockage
  return await Promise.all(enrichedChunks.map(async chunk => {
    const embedding = await embeddings.generate(chunk.content);
    return storeChunkWithEmbedding(chunk, embedding);
  }));
}
