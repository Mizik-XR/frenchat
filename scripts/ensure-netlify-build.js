
// Script pour v√©rifier la configuration Netlify et corriger les probl√®mes courants
const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification de la configuration Netlify...');

// Fonction pour v√©rifier si un fichier existe
function checkFileExists(filePath, description, required = false) {
  const exists = fs.existsSync(filePath);
  if (exists) {
    console.log(`‚úÖ ${description} trouv√©: ${filePath}`);
  } else if (required) {
    console.error(`‚ùå ERREUR: ${description} MANQUANT: ${filePath}`);
    return false;
  } else {
    console.warn(`‚ö†Ô∏è ATTENTION: ${description} non trouv√©: ${filePath}`);
  }
  return exists;
}

// V√©rifier les fichiers essentiels
const netlifyTomlExists = checkFileExists('netlify.toml', 'Fichier de configuration Netlify');
const redirectsExists = checkFileExists('_redirects', 'Fichier de redirection Netlify');
const headersExists = checkFileExists('_headers', 'Fichier d\'en-t√™tes Netlify') || 
                      checkFileExists('scripts/_headers', 'Fichier d\'en-t√™tes Netlify (dans scripts)');

// V√©rifier la configuration base dans vite.config.ts
let viteConfigOk = false;
if (checkFileExists('vite.config.ts', 'Configuration Vite', true)) {
  try {
    const viteConfig = fs.readFileSync('vite.config.ts', 'utf8');
    
    // V√©rifier si base: './' est configur√©
    if (viteConfig.includes("base: './'") || viteConfig.includes('base: "./')) {
      console.log('‚úÖ Configuration base: "./" trouv√©e dans vite.config.ts');
      viteConfigOk = true;
    } else {
      console.error('‚ùå ERREUR: base: "./" manquant dans vite.config.ts');
      console.error('   C\'est ESSENTIEL pour que Netlify fonctionne correctement.');
      console.error('   Sans cela, les imports seront absolus et Netlify retournera index.html au lieu des fichiers JS.');
    }
    
    // V√©rifier si les plugins n√©cessaires sont configur√©s
    if (viteConfig.includes('ensureRelativePaths')) {
      console.log('‚úÖ Plugin ensureRelativePaths trouv√© dans vite.config.ts');
    } else {
      console.warn('‚ö†Ô∏è ATTENTION: Plugin ensureRelativePaths non trouv√© dans vite.config.ts');
    }
    
    if (viteConfig.includes('copyRedirectsAndHeaders')) {
      console.log('‚úÖ Plugin copyRedirectsAndHeaders trouv√© dans vite.config.ts');
    } else {
      console.warn('‚ö†Ô∏è ATTENTION: Plugin copyRedirectsAndHeaders non trouv√© dans vite.config.ts');
    }
  } catch (error) {
    console.error('‚ùå ERREUR de lecture de vite.config.ts:', error.message);
  }
}

// V√©rifier l'index.html si existant (pour les chemins absolus et le script Lovable)
if (fs.existsSync('dist/index.html')) {
  try {
    const indexContent = fs.readFileSync('dist/index.html', 'utf8');
    
    // V√©rifier les chemins absolus
    const absolutePathsCount = (indexContent.match(/src="\//g) || []).length + 
                              (indexContent.match(/href="\//g) || []).length;
    
    if (absolutePathsCount > 0) {
      console.warn(`‚ö†Ô∏è ATTENTION: ${absolutePathsCount} chemins absolus d√©tect√©s dans dist/index.html`);
      console.warn('   Cela causera probablement des erreurs MIME type dans Netlify.');
    } else {
      console.log('‚úÖ Aucun chemin absolu trouv√© dans dist/index.html');
    }
    
    // V√©rifier le script Lovable
    if (indexContent.includes('cdn.gpteng.co/gptengineer.js')) {
      console.log('‚úÖ Script Lovable trouv√© dans dist/index.html');
    } else {
      console.warn('‚ö†Ô∏è ATTENTION: Script Lovable manquant dans dist/index.html');
    }
  } catch (error) {
    console.error('‚ùå ERREUR de lecture de dist/index.html:', error.message);
  }
}

// V√©rifier si des fichiers JS dans dist contiennent des chemins absolus
if (fs.existsSync('dist/assets')) {
  try {
    const jsFiles = fs.readdirSync('dist/assets')
      .filter(file => file.endsWith('.js'));
    
    let jsFilesWithAbsolutePaths = 0;
    
    for (const file of jsFiles) {
      try {
        const content = fs.readFileSync(path.join('dist/assets', file), 'utf8');
        const hasAbsolutePaths = content.includes('from"/') || 
                                content.includes('import"/') || 
                                content.includes('fetch("/');
        
        if (hasAbsolutePaths) {
          jsFilesWithAbsolutePaths++;
        }
      } catch (error) {
        console.error(`‚ùå ERREUR de lecture de dist/assets/${file}:`, error.message);
      }
    }
    
    if (jsFilesWithAbsolutePaths > 0) {
      console.warn(`‚ö†Ô∏è ATTENTION: ${jsFilesWithAbsolutePaths} fichiers JS contiennent des chemins absolus`);
    } else {
      console.log('‚úÖ Aucun fichier JS avec des chemins absolus d√©tect√©');
    }
  } catch (error) {
    console.error('‚ùå ERREUR lors de la v√©rification des fichiers JS:', error.message);
  }
}

// R√©sum√© de la v√©rification
console.log('\nüìã R√©sum√© de la v√©rification:');
if (!viteConfigOk || !netlifyTomlExists || !redirectsExists) {
  console.error('‚ùå Des probl√®mes importants ont √©t√© d√©tect√©s qui pourraient emp√™cher le d√©ploiement Netlify.');
  console.error('   Veuillez corriger ces probl√®mes avant de d√©ployer.');
  process.exit(1);
} else {
  console.log('‚úÖ Configuration de base correcte pour Netlify.');
  console.log('   Vous pouvez d√©ployer avec confiance, mais surveillez les avertissements ci-dessus.');
  process.exit(0);
}
