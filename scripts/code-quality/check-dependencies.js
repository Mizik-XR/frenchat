#!/usr/bin/env node
/**
 * Script pour v√©rifier les d√©pendances circulaires et les imports directs
 * 
 * Ce script analyse le code source pour d√©tecter deux types de probl√®mes:
 * 1. D√©pendances circulaires entre modules
 * 2. Imports directs de React (au lieu d'utiliser le module centralis√©)
 * 
 * Usage: node scripts/code-quality/check-dependencies.js
 * Options:
 *   --report-only    G√©n√©rer uniquement un rapport sans √©chouer en cas de probl√®mes
 *   --fix            Tenter de corriger automatiquement les probl√®mes d'import React
 */

const fs = require('fs');
const path = require('path');
const child_process = require('child_process');
const util = require('util');
const glob = require('glob');
const exec = util.promisify(child_process.exec);

// Configuration
const CONFIG = {
  srcDir: 'src',
  ignoredPaths: [
    '**/node_modules/**',
    '**/dist/**',
    '**/build/**',
    '**/.next/**',
    '**/public/**',
    '**/core/reactInstance.ts',
  ],
  outputFile: 'dependency-report.md',
  reactInstancePath: 'src/core/reactInstance.ts',
  reportOnly: process.argv.includes('--report-only'),
  fixReactImports: process.argv.includes('--fix'),
  // Sch√©ma de d√©pendances critiques √† v√©rifier
  criticalDependencies: [
    {
      module: 'APP_STATE',
      shouldNotImport: ['supabase', 'supabaseClient']
    },
    {
      module: 'supabase',
      shouldNotImport: ['APP_STATE', 'appState']
    }
  ]
};

// Utilitaires de journalisation
const colors = {
  reset: '\x1b[0m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m',
  white: '\x1b[37m',
};

function log(message, color = colors.white) {
  console.log(`${color}${message}${colors.reset}`);
}

function info(message) {
  log(`‚ÑπÔ∏è ${message}`, colors.cyan);
}

function success(message) {
  log(`‚úÖ ${message}`, colors.green);
}

function warn(message) {
  log(`‚ö†Ô∏è ${message}`, colors.yellow);
}

function error(message) {
  log(`‚ùå ${message}`, colors.red);
}

// V√©rifier si madge est install√©
async function checkDependencies() {
  try {
    info('V√©rification des d√©pendances...');
    
    try {
      await exec('madge --version');
      success('madge est install√©');
    } catch (e) {
      warn('madge n\'est pas install√©. Installation en cours...');
      await exec('npm install -g madge');
      success('madge a √©t√© install√© avec succ√®s');
    }
    
    return true;
  } catch (err) {
    error(`Erreur lors de la v√©rification/installation des d√©pendances: ${err.message}`);
    return false;
  }
}

// Trouver les d√©pendances circulaires avec madge
async function findCircularDependencies() {
  info('Recherche des d√©pendances circulaires...');
  
  try {
    const { stdout } = await exec(`npx madge --circular --extensions ts,tsx,js,jsx ${CONFIG.srcDir}`);
    
    if (stdout.trim()) {
      const circularDeps = stdout.trim().split('\n').filter(line => line.trim() !== '');
      warn(`${circularDeps.length} d√©pendances circulaires trouv√©es`);
      return circularDeps;
    } else {
      success('Aucune d√©pendance circulaire trouv√©e');
      return [];
    }
  } catch (err) {
    error(`Erreur lors de la recherche des d√©pendances circulaires: ${err.message}`);
    return [];
  }
}

// Rechercher les imports directs de React
function findDirectReactImports() {
  info('Recherche des imports directs de React...');
  
  try {
    const importPatterns = [
      /import\s+React(?:,\s*{([^}]*)})?\s+from\s+['"]react['"]/g,
      /import\s+{\s*([^}]*)\s*}\s+from\s+['"]react['"]/g
    ];
    
    const files = glob.sync(`${CONFIG.srcDir}/**/*.{js,jsx,ts,tsx}`, { ignore: CONFIG.ignoredPaths });
    const directImports = [];
    
    for (const file of files) {
      const content = fs.readFileSync(file, 'utf8');
      
      for (const pattern of importPatterns) {
        while (pattern.exec(content) !== null) {
          directImports.push(file);
          break; // Un seul match par fichier suffit
        }
        pattern.lastIndex = 0; // R√©initialiser le regex
      }
    }
    
    if (directImports.length > 0) {
      warn(`${directImports.length} fichiers avec des imports directs de React trouv√©s`);
    } else {
      success('Aucun import direct de React trouv√©');
    }
    
    return directImports;
  } catch (err) {
    error(`Erreur lors de la recherche des imports directs de React: ${err.message}`);
    return [];
  }
}

// V√©rifier les d√©pendances critiques
function checkCriticalDependencies() {
  info('V√©rification des d√©pendances critiques...');
  
  try {
    const issues = [];
    
    for (const dep of CONFIG.criticalDependencies) {
      const regex = new RegExp(`import\\s+.*\\s+from\\s+['"][^'"]*${dep.shouldNotImport.join('|')}['"]`, 'g');
      const files = glob.sync(`${CONFIG.srcDir}/**/*${dep.module}*.{js,jsx,ts,tsx}`, { ignore: CONFIG.ignoredPaths });
      
      for (const file of files) {
        const content = fs.readFileSync(file, 'utf8');
        const matches = content.match(regex);
        
        if (matches) {
          for (const match of matches) {
            issues.push({
              file,
              module: dep.module,
              shouldNotImport: dep.shouldNotImport.find(m => match.includes(m)),
              line: match.trim()
            });
          }
        }
      }
    }
    
    if (issues.length > 0) {
      warn(`${issues.length} probl√®mes de d√©pendances critiques trouv√©s`);
    } else {
      success('Aucun probl√®me de d√©pendances critiques trouv√©');
    }
    
    return issues;
  } catch (err) {
    error(`Erreur lors de la v√©rification des d√©pendances critiques: ${err.message}`);
    return [];
  }
}

// G√©n√©rer un rapport
function generateReport(circularDeps, directImports, criticalIssues) {
  info('G√©n√©ration du rapport...');
  
  try {
    const reportContent = [
      '# Rapport d\'analyse des d√©pendances',
      '',
      `*G√©n√©r√© le ${new Date().toLocaleString()}*`,
      '',
      '## D√©pendances circulaires',
      '',
      circularDeps.length > 0 
        ? circularDeps.map(dep => `- ${dep}`).join('\n') 
        : 'Aucune d√©pendance circulaire trouv√©e ‚úÖ',
      '',
      '## Imports directs de React',
      '',
      directImports.length > 0 
        ? directImports.map(file => `- ${file}`).join('\n') 
        : 'Aucun import direct de React trouv√© ‚úÖ',
      '',
      '## Probl√®mes de d√©pendances critiques',
      '',
      criticalIssues.length > 0 
        ? criticalIssues.map(issue => (
            `- **${issue.file}**: Le module \`${issue.module}\` ne devrait pas importer \`${issue.shouldNotImport}\`\n  \`${issue.line}\``
          )).join('\n\n')
        : 'Aucun probl√®me de d√©pendances critiques trouv√© ‚úÖ',
      '',
      '## Recommandations',
      '',
      circularDeps.length > 0 || directImports.length > 0 || criticalIssues.length > 0 
        ? [
            '### Pour r√©soudre les d√©pendances circulaires:',
            '- Cr√©er des modules interm√©diaires pour les types partag√©s',
            '- Utiliser le pattern d\'injection de d√©pendances',
            '- Restructurer les modules pour √©viter les imports mutuels',
            '',
            '### Pour corriger les imports directs de React:',
            '- Utiliser `import React from \'@/core/reactInstance\'` √† la place de `import React from \'react\'`',
            '- Ex√©cuter `node scripts/code-quality/fix-react-imports.js --fix` pour corriger automatiquement',
            '',
            '### Pour les probl√®mes de d√©pendances critiques:',
            '- R√©organiser le code pour respecter l\'architecture d√©finie',
            '- Utiliser des services ou des adaptateurs pour d√©coupler les modules',
          ].join('\n')
        : 'F√©licitations ! Aucun probl√®me de d√©pendances d√©tect√© dans le code. üéâ',
    ].join('\n');
    
    fs.writeFileSync(CONFIG.outputFile, reportContent, 'utf8');
    success(`Rapport g√©n√©r√©: ${CONFIG.outputFile}`);
    return true;
  } catch (err) {
    error(`Erreur lors de la g√©n√©ration du rapport: ${err.message}`);
    return false;
  }
}

// V√©rification du fichier centralis√© React
function checkReactInstanceExists() {
  if (!fs.existsSync(CONFIG.reactInstancePath)) {
    warn(`Le fichier ${CONFIG.reactInstancePath} n'existe pas.`);
    warn('Cr√©ez ce fichier pour centraliser les imports de React et √©viter les probl√®mes de versions multiples.');
    return false;
  }
  return true;
}

// Fonction principale
async function main() {
  info('D√©marrage de l\'analyse des d√©pendances...');
  
  // V√©rifier les d√©pendances
  const depsOk = await checkDependencies();
  if (!depsOk) {
    error('Impossible de continuer sans les d√©pendances requises.');
    process.exit(1);
  }
  
  // V√©rifier l'existence du fichier reactInstance
  checkReactInstanceExists();
  
  // Collecter les r√©sultats des diff√©rentes v√©rifications
  const circularDeps = await findCircularDependencies();
  const directImports = findDirectReactImports();
  const criticalIssues = checkCriticalDependencies();
  
  // G√©n√©rer le rapport
  generateReport(circularDeps, directImports, criticalIssues);
  
  // D√©terminer si l'ex√©cution a r√©ussi ou √©chou√©
  const hasIssues = circularDeps.length > 0 || directImports.length > 0 || criticalIssues.length > 0;
  
  if (hasIssues) {
    if (CONFIG.reportOnly) {
      warn('Des probl√®mes ont √©t√© d√©tect√©s, mais le script s\'ex√©cute en mode rapport uniquement.');
      info(`Consultez ${CONFIG.outputFile} pour plus de d√©tails.`);
    } else {
      error('Des probl√®mes de d√©pendances ont √©t√© d√©tect√©s.');
      info(`Consultez ${CONFIG.outputFile} pour plus de d√©tails.`);
      process.exit(1);
    }
  } else {
    success('Aucun probl√®me de d√©pendances d√©tect√© !');
  }
}

// Ex√©cuter le script
main(); 